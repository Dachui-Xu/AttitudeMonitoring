@startuml
enum com.example.attitudemonitoring.bean.SensorConditionLoader$StatusFile {
}
class com.example.attitudemonitoring.bean.SensorConditionLoader$Condition {
}
class com.example.attitudemonitoring.bean.SensorConditionLoader$SensorRange {
}
class com.example.attitudemonitoring.bean.SensorConditionLoader {
+  sensorKeys
- Map<String, Condition> conditions
- String lastStatus
-  sensorWindows
+ void loadConditionsFromYaml(StatusFile)
- Pair<Int, Int> getSensorExtremes(String)
+ void updateSensorData(String,Int)
+ String determineStatus()
+ String switchMode()
- Boolean isWithinRange(Int,SensorRange?)
}


class com.example.attitudemonitoring.util.CsvFileWriter {
+ File writeSensorDataToCsv(Context,List<Sensor>,String)
}

class com.example.attitudemonitoring.util.TimedVibrationManager {
- Job? vibrationJob
- Long? remainingTimeMillis
- Long intervalMillis
+ void startTimedVibration(Long)
+ void stopTimedVibration()
+ void pauseTimedVibration()
+ void resumeTimedVibration()
+ void judgeVibrator(MultipleLineChartsViewModel.Mode,String)
- void performVibration(Vibrator)
- Vibrator getVibrator()
- Long calculateVibrationDuration(MultipleLineChartsViewModel.Mode,String)
}


class com.example.attitudemonitoring.util.TimerManager {
- Job? timerJob
- Long startTimeMillis
- Long elapsedTimeMillis
- Long pausedTimeMillis
- Boolean isPaused
+ void start()
+ void pause()
+ void resume()
+ void stop()
- String formatElapsedTime(Long)
+ void reset()
}


class com.example.attitudemonitoring.handler.LineChartHandler {
- LineDataSet dataSet
-  scope
-  isPaused
- Job? job
- void addEntry()
+ void startUpdatingData()
+ void stopUpdatingData()
+ void pauseUpdatingData()
+ void resumeUpdatingData()
+ void clearData()
+ void resetData()
}


class com.example.attitudemonitoring.bean.SensorData {
}
class com.example.attitudemonitoring.bean.RealTimeClassifier {
- String lastStatus
-  sensorWindows
- Interpreter tflite
+  sensorKeys
- void loadModel()
- Pair<Float, Float> getSensorExtremes(String)
+ void updateSensorData(String,Int)
+ String determineStatus()
- String processOutput(FloatArray)
}


class com.example.attitudemonitoring.bean.LogoutInfo {
}
class com.example.attitudemonitoring.handler.MultiLineChartHandler {
-  handlers
-  sensors
+ void addHandler(LineChartHandler)
+ void startAll()
+ void stopAll()
+ void pauseAll()
+ void resumeAll()
+ List<LineChartHandler> getHandlers()
+ void clearAll()
+ void resetAll()
}


class com.example.attitudemonitoring.service.BluetoothService$ConnectThread {
- BluetoothSocket? socket
- ByteArray mmBuffer
+ void run()
- void manageConnectedSocket(BluetoothSocket?)
+ void write(String)
+ void cancel()
}


class com.example.attitudemonitoring.service.BluetoothService {
- BluetoothManager bluetoothManager
- BluetoothAdapter? bluetoothAdapter
- ConnectThread? connectThread
- Handler handler
+ IBinder? onBind(Intent?)
+ Int onStartCommand(Intent?,Int,Int)
- Boolean checkBluetoothPermissions()
- void connectToDevice(BluetoothDevice)
+ void onDestroy()
}


enum MultipleLineChartsViewModel$Mode {
}
class MultipleLineChartsViewModel {
-  multiLineChartHandler
+  isRunning
+  conditionLoader
+  realTimeClassifier
+  timedVibrationManager
+  vibrateRunning
+ MutableMap<String, Int> sensorValues
+  status
+  _lastStatus
- Job? judgeJob
-  _currentMode
+  currentMode
-  timerManager
-  _elapsedTime
+ String duration
+ void null()
+ void switchMode()
+ List<LineChartHandler> getHandlers()
+ void startAll()
+ void stopAll()
+ void pauseAll()
+ void resumeAll()
+ void clearAll()
+ void resetAll()
+ File saveSensorData()
+ void shareSensorData()
- void shareFile(Context,File)
- void startJudgeStatus()
- void stopJudgeStatus()
}


interface com.example.attitudemonitoring.bean.Animation {
+ Int resourceId
}

enum com.example.attitudemonitoring.bean.WorkAnimation {
}
enum com.example.attitudemonitoring.bean.DriveAnimation {
}
class com.example.attitudemonitoring.bean.Sensor {
-  sensorDataList
+  isCollecting
- Long? startTime
+ Int newValue
+ Job? job
+ void addSensorData(Int)
+ List<SensorData> getSensorData()
+ String getName()
+ void clearSensorData()
+ void generateRandomSensorValue()
+ void cancel()
}


class com.example.attitudemonitoring.ui.MainActivity {
-  bluetoothType
- BluetoothClient bluetoothClient
-  deviceName
-  serviceList
-  receiveCharacteristicList
-  sendCharacteristicList
-  readCharacteristicList
- Service? service
- Characteristic? receiveCharacteristic
- Characteristic? sendCharacteristic
- Characteristic? readCharacteristic
- String readDataStr
-  receivePackets
-  mtu
-  showChangeMtuDialog
-  logoutList
-  dataHistory
- Boolean readFlag
-  scrollToBottom
-  showScanDialog
-  scanning
-  scanDeviceList
-  appTitle
+ void initData()
+ void Content()
- void ServiceChoose(Modifier)
- void RealtimeLogout(Modifier)
+ void DataReaderScreen(Modifier)
+ void ReadPreview()
- void readData((Boolean, String) -> Unit)
- void startScanDevice()
- void stopScanDevice()
- void connectDevice(Device)
- void supportedServices()
- void assignService(Service?)
- void receiveData()
- void sendData(ByteArray)
- void readData()
+ void onDestroy()
}


class DataReaderViewModel {
}
enum Option {
+  MODEL
+  YAML
}

class com.example.attitudemonitoring.viewModel.ViewModelFactory {
}
class com.example.attitudemonitoring.viewModel.SharedViewModel {
+  readFlag
+  sensors
+  optionModel
+  sensorsValue
+ void parseSharedData(String)
- void updateSensors()
}


abstract class com.example.attitudemonitoring.ui.ComposeBaseActivity {
-  showLoading
-  loadingCancelable
-  snackBarState
+ void onCreate(Bundle?)
# void handleIntent(Intent)
# void initData()
# void Content()
+ void showLoading(Boolean)
+ void hideLoading()
+ void showSnackBar(String,void,String?,void,Boolean,void,SnackbarDuration)
+ void null()
+ void showToast(String)
+ void onSaveInstanceState(Bundle)
+ void onRestoreInstanceState(Bundle)
+ void onDestroy()
}




com.example.attitudemonitoring.bean.SensorConditionLoader +.. com.example.attitudemonitoring.bean.SensorConditionLoader$StatusFile
com.example.attitudemonitoring.bean.SensorConditionLoader +.. com.example.attitudemonitoring.bean.SensorConditionLoader$Condition
com.example.attitudemonitoring.bean.SensorConditionLoader +.. com.example.attitudemonitoring.bean.SensorConditionLoader$SensorRange
com.example.attitudemonitoring.service.BluetoothService +.. com.example.attitudemonitoring.service.BluetoothService$ConnectThread
com.example.attitudemonitoring.service.Thread <|-- com.example.attitudemonitoring.service.BluetoothService$ConnectThread
android.app.Service <|-- com.example.attitudemonitoring.service.BluetoothService
MultipleLineChartsViewModel +.. MultipleLineChartsViewModel$Mode
androidx.lifecycle.ViewModel <|-- MultipleLineChartsViewModel
com.example.attitudemonitoring.bean.Animation <|.. com.example.attitudemonitoring.bean.WorkAnimation
com.example.attitudemonitoring.bean.Animation <|.. com.example.attitudemonitoring.bean.DriveAnimation
com.example.attitudemonitoring.ui.ComposeBaseActivity <|-- com.example.attitudemonitoring.ui.MainActivity
androidx.lifecycle.ViewModel <|-- com.example.attitudemonitoring.viewModel.SharedViewModel
androidx.activity.ComponentActivity <|-- com.example.attitudemonitoring.ui.ComposeBaseActivity
@enduml